/*
 * TVMaze
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.bme.aut.tvshows.model

import com.google.gson.annotations.SerializedName
import io.swagger.v3.oas.annotations.media.Schema
import java.math.BigDecimal
import java.util.*

/**
 * Season
 */
class Season {
    /**
     * Get id
     * @return id
     */
    @get:Schema(required = true, description = "")
    @SerializedName("id")
    var id: BigDecimal? = null

    /**
     * Get url
     * @return url
     */
    @get:Schema(required = true, description = "")
    @SerializedName("url")
    var url: String? = null

    /**
     * Get number
     * @return number
     */
    @get:Schema(required = true, description = "")
    @SerializedName("number")
    var number: BigDecimal? = null

    /**
     * Get name
     * @return name
     */
    @get:Schema(required = true, description = "")
    @SerializedName("name")
    var name: String? = null

    /**
     * Get episodeOrder
     * @return episodeOrder
     */
    @get:Schema(required = true, description = "")
    @SerializedName("episodeOrder")
    var episodeOrder: BigDecimal? = null

    /**
     * Get premiereDate
     * @return premiereDate
     */
    @get:Schema(required = true, description = "")
    @SerializedName("premiereDate")
    var premiereDate: String? = null

    /**
     * Get endDate
     * @return endDate
     */
    @get:Schema(required = true, description = "")
    @SerializedName("endDate")
    var endDate: String? = null

    /**
     * Get network
     * @return network
     */
    @get:Schema(required = true, description = "")
    @SerializedName("network")
    var network: Network? = null

    /**
     * Get webChannel
     * @return webChannel
     */
    @get:Schema(description = "")
    @SerializedName("webChannel")
    var webChannel: Any? = null

    /**
     * Get image
     * @return image
     */
    @get:Schema(required = true, description = "")
    @SerializedName("image")
    var image: Image? = null

    /**
     * Get summary
     * @return summary
     */
    @get:Schema(description = "")
    @SerializedName("summary")
    var summary: Any? = null

    /**
     * Get _links
     * @return _links
     */
    @get:Schema(required = true, description = "")
    @SerializedName("_links")
    var links: SeasonLinks? = null
    fun id(id: BigDecimal?): Season {
        this.id = id
        return this
    }

    fun url(url: String?): Season {
        this.url = url
        return this
    }

    fun number(number: BigDecimal?): Season {
        this.number = number
        return this
    }

    fun name(name: String?): Season {
        this.name = name
        return this
    }

    fun episodeOrder(episodeOrder: BigDecimal?): Season {
        this.episodeOrder = episodeOrder
        return this
    }

    fun premiereDate(premiereDate: String?): Season {
        this.premiereDate = premiereDate
        return this
    }

    fun endDate(endDate: String?): Season {
        this.endDate = endDate
        return this
    }

    fun network(network: Network?): Season {
        this.network = network
        return this
    }

    fun webChannel(webChannel: Any?): Season {
        this.webChannel = webChannel
        return this
    }

    fun image(image: Image?): Season {
        this.image = image
        return this
    }

    fun summary(summary: Any?): Season {
        this.summary = summary
        return this
    }

    fun _links(_links: SeasonLinks?): Season {
        links = _links
        return this
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null || javaClass != other.javaClass) {
            return false
        }
        val season = other as Season
        return id == season.id &&
                url == season.url &&
                number == season.number &&
                name == season.name &&
                episodeOrder == season.episodeOrder &&
                premiereDate == season.premiereDate &&
                endDate == season.endDate &&
                network == season.network &&
                webChannel == season.webChannel &&
                image == season.image &&
                summary == season.summary &&
                links == season.links
    }

    override fun hashCode(): Int {
        return Objects.hash(
            id,
            url,
            number,
            name,
            episodeOrder,
            premiereDate,
            endDate,
            network,
            webChannel,
            image,
            summary,
            links
        )
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class Season {\n")
        sb.append("    id: ").append(toIndentedString(id)).append("\n")
        sb.append("    url: ").append(toIndentedString(url)).append("\n")
        sb.append("    number: ").append(toIndentedString(number)).append("\n")
        sb.append("    name: ").append(toIndentedString(name)).append("\n")
        sb.append("    episodeOrder: ").append(toIndentedString(episodeOrder)).append("\n")
        sb.append("    premiereDate: ").append(toIndentedString(premiereDate)).append("\n")
        sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n")
        sb.append("    network: ").append(toIndentedString(network)).append("\n")
        sb.append("    webChannel: ").append(toIndentedString(webChannel)).append("\n")
        sb.append("    image: ").append(toIndentedString(image)).append("\n")
        sb.append("    summary: ").append(toIndentedString(summary)).append("\n")
        sb.append("    _links: ").append(toIndentedString(links)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}