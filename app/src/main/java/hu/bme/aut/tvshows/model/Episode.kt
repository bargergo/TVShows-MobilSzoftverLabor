/*
 * TVMaze
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.bme.aut.tvshows.model

import com.google.gson.annotations.SerializedName
import io.swagger.v3.oas.annotations.media.Schema
import java.math.BigDecimal
import java.util.*

/**
 * Episode
 */
class Episode {
    /**
     * Get id
     * @return id
     */
    @get:Schema(required = true, description = "")
    @SerializedName("id")
    var id: BigDecimal? = null

    /**
     * Get url
     * @return url
     */
    @get:Schema(required = true, description = "")
    @SerializedName("url")
    var url: String? = null

    /**
     * Get name
     * @return name
     */
    @get:Schema(required = true, description = "")
    @SerializedName("name")
    var name: String? = null

    /**
     * Get season
     * @return season
     */
    @get:Schema(required = true, description = "")
    @SerializedName("season")
    var season: BigDecimal? = null

    /**
     * Get number
     * @return number
     */
    @get:Schema(required = true, description = "")
    @SerializedName("number")
    var number: BigDecimal? = null

    /**
     * Get type
     * @return type
     */
    @get:Schema(required = true, description = "")
    @SerializedName("type")
    var type: String? = null

    /**
     * Get airdate
     * @return airdate
     */
    @get:Schema(required = true, description = "")
    @SerializedName("airdate")
    var airdate: String? = null

    /**
     * Get airtime
     * @return airtime
     */
    @get:Schema(required = true, description = "")
    @SerializedName("airtime")
    var airtime: String? = null

    /**
     * Get airstamp
     * @return airstamp
     */
    @get:Schema(required = true, description = "")
    @SerializedName("airstamp")
    var airstamp: String? = null

    /**
     * Get runtime
     * @return runtime
     */
    @get:Schema(required = true, description = "")
    @SerializedName("runtime")
    var runtime: BigDecimal? = null

    /**
     * Get image
     * @return image
     */
    @get:Schema(description = "")
    @SerializedName("image")
    var image: Image? = null

    /**
     * Get summary
     * @return summary
     */
    @get:Schema(required = true, description = "")
    @SerializedName("summary")
    var summary: String? = null

    /**
     * Get _links
     * @return _links
     */
    @get:Schema(required = true, description = "")
    @SerializedName("_links")
    var links: Links? = null
    fun id(id: BigDecimal?): Episode {
        this.id = id
        return this
    }

    fun url(url: String?): Episode {
        this.url = url
        return this
    }

    fun name(name: String?): Episode {
        this.name = name
        return this
    }

    fun season(season: BigDecimal?): Episode {
        this.season = season
        return this
    }

    fun number(number: BigDecimal?): Episode {
        this.number = number
        return this
    }

    fun type(type: String?): Episode {
        this.type = type
        return this
    }

    fun airdate(airdate: String?): Episode {
        this.airdate = airdate
        return this
    }

    fun airtime(airtime: String?): Episode {
        this.airtime = airtime
        return this
    }

    fun airstamp(airstamp: String?): Episode {
        this.airstamp = airstamp
        return this
    }

    fun runtime(runtime: BigDecimal?): Episode {
        this.runtime = runtime
        return this
    }

    fun image(image: Image?): Episode {
        this.image = image
        return this
    }

    fun summary(summary: String?): Episode {
        this.summary = summary
        return this
    }

    fun _links(_links: Links?): Episode {
        links = _links
        return this
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null || javaClass != other.javaClass) {
            return false
        }
        val episode = other as Episode
        return id == episode.id &&
                url == episode.url &&
                name == episode.name &&
                season == episode.season &&
                number == episode.number &&
                type == episode.type &&
                airdate == episode.airdate &&
                airtime == episode.airtime &&
                airstamp == episode.airstamp &&
                runtime == episode.runtime &&
                image == episode.image &&
                summary == episode.summary &&
                links == episode.links
    }

    override fun hashCode(): Int {
        return Objects.hash(
            id,
            url,
            name,
            season,
            number,
            type,
            airdate,
            airtime,
            airstamp,
            runtime,
            image,
            summary,
            links
        )
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class Episode {\n")
        sb.append("    id: ").append(toIndentedString(id)).append("\n")
        sb.append("    url: ").append(toIndentedString(url)).append("\n")
        sb.append("    name: ").append(toIndentedString(name)).append("\n")
        sb.append("    season: ").append(toIndentedString(season)).append("\n")
        sb.append("    number: ").append(toIndentedString(number)).append("\n")
        sb.append("    type: ").append(toIndentedString(type)).append("\n")
        sb.append("    airdate: ").append(toIndentedString(airdate)).append("\n")
        sb.append("    airtime: ").append(toIndentedString(airtime)).append("\n")
        sb.append("    airstamp: ").append(toIndentedString(airstamp)).append("\n")
        sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n")
        sb.append("    image: ").append(toIndentedString(image)).append("\n")
        sb.append("    summary: ").append(toIndentedString(summary)).append("\n")
        sb.append("    _links: ").append(toIndentedString(links)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}