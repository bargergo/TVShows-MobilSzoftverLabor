/*
 * TVMaze
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.bme.aut.tvshows.model

import com.google.gson.annotations.SerializedName
import io.swagger.v3.oas.annotations.media.Schema
import java.math.BigDecimal
import java.util.*

/**
 * ShowData
 */
class ShowData {
    /**
     * Get name
     * @return name
     */
    @get:Schema(required = true, description = "")
    @SerializedName("name")
    var name: String? = null

    /**
     * Get type
     * @return type
     */
    @get:Schema(required = true, description = "")
    @SerializedName("type")
    var type: String? = null

    /**
     * Get language
     * @return language
     */
    @get:Schema(required = true, description = "")
    @SerializedName("language")
    var language: String? = null

    @SerializedName("genres")
    private var genres: MutableList<String> = ArrayList()

    /**
     * Get status
     * @return status
     */
    @get:Schema(required = true, description = "")
    @SerializedName("status")
    var status: String? = null

    /**
     * Get runtime
     * @return runtime
     */
    @get:Schema(required = true, description = "")
    @SerializedName("runtime")
    var runtime: BigDecimal? = null

    /**
     * Get premiered
     * @return premiered
     */
    @get:Schema(required = true, description = "")
    @SerializedName("premiered")
    var premiered: String? = null

    /**
     * Get officialSite
     * @return officialSite
     */
    @get:Schema(required = true, description = "")
    @SerializedName("officialSite")
    var officialSite: String? = null

    /**
     * Get schedule
     * @return schedule
     */
    @get:Schema(required = true, description = "")
    @SerializedName("schedule")
    var schedule: Schedule? = null

    /**
     * Get rating
     * @return rating
     */
    @get:Schema(required = true, description = "")
    @SerializedName("rating")
    var rating: Rating? = null

    /**
     * Get weight
     * @return weight
     */
    @get:Schema(required = true, description = "")
    @SerializedName("weight")
    var weight: BigDecimal? = null

    /**
     * Get network
     * @return network
     */
    @get:Schema(required = true, description = "")
    @SerializedName("network")
    var network: Network? = null

    /**
     * Get webChannel
     * @return webChannel
     */
    @get:Schema(description = "")
    @SerializedName("webChannel")
    var webChannel: Any? = null

    /**
     * Get dvdCountry
     * @return dvdCountry
     */
    @get:Schema(description = "")
    @SerializedName("dvdCountry")
    var dvdCountry: Any? = null

    /**
     * Get externals
     * @return externals
     */
    @get:Schema(required = true, description = "")
    @SerializedName("externals")
    var externals: Externals? = null

    /**
     * Get image
     * @return image
     */
    @get:Schema(description = "")
    @SerializedName("image")
    var image: Image? = null

    /**
     * Get summary
     * @return summary
     */
    @get:Schema(required = true, description = "")
    @SerializedName("summary")
    var summary: String? = null

    /**
     * Get updated
     * @return updated
     */
    @get:Schema(required = true, description = "")
    @SerializedName("updated")
    var updated: BigDecimal? = null
    fun name(name: String?): ShowData {
        this.name = name
        return this
    }

    fun type(type: String?): ShowData {
        this.type = type
        return this
    }

    fun language(language: String?): ShowData {
        this.language = language
        return this
    }

    fun genres(genres: MutableList<String>): ShowData {
        this.genres = genres
        return this
    }

    fun addGenresItem(genresItem: String): ShowData {
        genres.add(genresItem)
        return this
    }

    /**
     * Get genres
     * @return genres
     */
    @Schema(required = true, description = "")
    fun getGenres(): List<String> {
        return genres
    }

    fun setGenres(genres: MutableList<String>) {
        this.genres = genres
    }

    fun status(status: String?): ShowData {
        this.status = status
        return this
    }

    fun runtime(runtime: BigDecimal?): ShowData {
        this.runtime = runtime
        return this
    }

    fun premiered(premiered: String?): ShowData {
        this.premiered = premiered
        return this
    }

    fun officialSite(officialSite: String?): ShowData {
        this.officialSite = officialSite
        return this
    }

    fun schedule(schedule: Schedule?): ShowData {
        this.schedule = schedule
        return this
    }

    fun rating(rating: Rating?): ShowData {
        this.rating = rating
        return this
    }

    fun weight(weight: BigDecimal?): ShowData {
        this.weight = weight
        return this
    }

    fun network(network: Network?): ShowData {
        this.network = network
        return this
    }

    fun webChannel(webChannel: Any?): ShowData {
        this.webChannel = webChannel
        return this
    }

    fun dvdCountry(dvdCountry: Any?): ShowData {
        this.dvdCountry = dvdCountry
        return this
    }

    fun externals(externals: Externals?): ShowData {
        this.externals = externals
        return this
    }

    fun image(image: Image?): ShowData {
        this.image = image
        return this
    }

    fun summary(summary: String?): ShowData {
        this.summary = summary
        return this
    }

    fun updated(updated: BigDecimal?): ShowData {
        this.updated = updated
        return this
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null || javaClass != other.javaClass) {
            return false
        }
        val showData = other as ShowData
        return name == showData.name &&
                type == showData.type &&
                language == showData.language &&
                genres == showData.genres &&
                status == showData.status &&
                runtime == showData.runtime &&
                premiered == showData.premiered &&
                officialSite == showData.officialSite &&
                schedule == showData.schedule &&
                rating == showData.rating &&
                weight == showData.weight &&
                network == showData.network &&
                webChannel == showData.webChannel &&
                dvdCountry == showData.dvdCountry &&
                externals == showData.externals &&
                image == showData.image &&
                summary == showData.summary &&
                updated == showData.updated
    }

    override fun hashCode(): Int {
        return Objects.hash(
            name,
            type,
            language,
            genres,
            status,
            runtime,
            premiered,
            officialSite,
            schedule,
            rating,
            weight,
            network,
            webChannel,
            dvdCountry,
            externals,
            image,
            summary,
            updated
        )
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class ShowData {\n")
        sb.append("    name: ").append(toIndentedString(name)).append("\n")
        sb.append("    type: ").append(toIndentedString(type)).append("\n")
        sb.append("    language: ").append(toIndentedString(language)).append("\n")
        sb.append("    genres: ").append(toIndentedString(genres)).append("\n")
        sb.append("    status: ").append(toIndentedString(status)).append("\n")
        sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n")
        sb.append("    premiered: ").append(toIndentedString(premiered)).append("\n")
        sb.append("    officialSite: ").append(toIndentedString(officialSite)).append("\n")
        sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n")
        sb.append("    rating: ").append(toIndentedString(rating)).append("\n")
        sb.append("    weight: ").append(toIndentedString(weight)).append("\n")
        sb.append("    network: ").append(toIndentedString(network)).append("\n")
        sb.append("    webChannel: ").append(toIndentedString(webChannel)).append("\n")
        sb.append("    dvdCountry: ").append(toIndentedString(dvdCountry)).append("\n")
        sb.append("    externals: ").append(toIndentedString(externals)).append("\n")
        sb.append("    image: ").append(toIndentedString(image)).append("\n")
        sb.append("    summary: ").append(toIndentedString(summary)).append("\n")
        sb.append("    updated: ").append(toIndentedString(updated)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}